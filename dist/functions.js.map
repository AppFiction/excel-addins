{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/* global clearInterval, console, setInterval */\nconst gistRawURL = \"https://gist.githubusercontent.com/AppFiction/750ae98fa400bb836515eee162b39057/raw/348b1216a59fef357945710cc20270b4ede089b1/market-data.json\";\n\n/**\n * Fetch json from a URL and show data in excel\n * @customfunction\n *  \n */\nasync function fetchMarketDataResults() {\n  debugger\n  try {\n    const response = await fetch(gistRawURL);\n    const marketData = await response.json();\n\n    // Convert market data to an array of arrays for Excel\n    const dataMatrix = [];\n    for (const symbol in marketData.results) {\n      const item = marketData.results[symbol];\n      const rowData = marketData.inputs.map(input => item[input]);\n      dataMatrix.push(rowData);\n    }\n\n    // Write data to Excel worksheet starting from the current cell\n    Excel.run(function (context) {\n      // const range = sheet.getRange(currentCellAddress);\n      const range = context.workbook.getSelectedRange();\n      const resizedRange = range.getResizedRange(dataMatrix.length - 1, dataMatrix[0].length - 1);\n\n      resizedRange.values = dataMatrix;\n\n      return context.sync();\n    }).catch(function (error) {\n      console.error(\"Error writing data to worksheet: \", error);\n    });\n\n    return \"Results Data fetched and added to the worksheet successfully!\";\n  } catch (error) {\n    console.error(\"Error fetching data: \", error);\n    return \"Error fetching data. Check console for details.\";\n  }\n}\n\n// Define the custom function using @customfunction decorator to fetch market data inputs\n/** @customfunction */\nasync function fetchMarketDataInputs() {\n  try {\n\n    // Mock market data - Replace this with actual data from your API\n    const response = await fetch(gistRawURL);\n    const marketData = await response.json();\n\n    // Convert inputs array to a 2D array for Excel\n    const inputsMatrix = [marketData.inputs];\n\n    // Write inputs data to Excel worksheet starting from the current cell\n    Excel.run(function (context) {\n      const range = context.workbook.getSelectedRange();\n      const resizedRange = range.getResizedRange(inputsMatrix.length - 1, inputsMatrix[0].length - 1);\n\n      resizedRange.values = inputsMatrix;\n\n      return context.sync();\n    }).catch(function (error) {\n      console.error(\"Error writing inputs data to worksheet: \", error);\n    });\n\n    return \"Inputs data fetched and added to the worksheet successfully!\";\n  } catch (error) {\n    console.error(\"Error fetching inputs data: \", error);\n    return \"Error fetching inputs data. Check console for details.\";\n  }\n}\n\n\n// Import the Excel namespace from the Office JavaScript API\n/* global Excel */\n\n// Define the custom function using @customfunction decorator\n/**\n *  @customfunction \n * */\nasync function fetchSupportedInputsByAnalytics() {\n  try {\n    // Fetch JSON data from the specified URL using a GET request\n    const url = \"https://gist.githubusercontent.com/AppFiction/29f83f73b8d54cc82f693b2d4f449c24/raw/c6a8f1a69509e67593255e2071216a0a2e30df02/gistfile1.json\";\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch data. Status: ${response.status}`);\n    }\n\n    const jsonData = await response.json();\ndebugger\n    // Write data to Excel worksheet starting from the current cell\n    Excel.run(function (context) {\n      const range = context.workbook.getSelectedRange();\n\n      // Convert JSON data to a 2D array for Excel\n      const dataMatrix = jsonData.map(item => {\n        return [\n          item.securityld,\n          item.priceDate,\n          item.baseCurrency,\n          item.idType2,\n          item.liqCap,\n          item.liqFloor,\n          item.risk,\n          item.riskHorizon,\n          item.riskLookbackPeriod,\n          item.riskReturnHorizon,\n          item.useBestPracticeRealm,\n          item.scenarioStartDate,\n          item.scenarioEndDate,\n          item.columnOrder.join(', '), // Join the columnOrder array as a string\n          item.sortByColumns.join(', ') // Join the sortByColumns array as a string\n        ];\n      });\n      const titlesRange = range.getOffsetRange(1, 0);\n      const resizedRange = titlesRange.getOffsetRange(1, 0).getResizedRange(dataMatrix.length - 1, dataMatrix[0].length - 1);\n\n      const titles = Object.keys(jsonData[0]);\n\n      titlesRange.values = titles;\n      resizedRange.values = dataMatrix;\n\n      return context.sync();\n    }).catch(function (error) {\n      console.error(\"Error writing data to worksheet: \", error);\n    });\n\n    return \"Data added to the worksheet successfully!\";\n  } catch (error) {\n    console.error(\"Error adding data: \", error);\n    return \"Error adding data. Check console for details.\";\n  }\n}\n\n\n\n\nCustomFunctions.associate(\"FETCHMARKETDATARESULTS\", fetchMarketDataResults);\nCustomFunctions.associate(\"FETCHMARKETDATAINPUTS\", fetchMarketDataInputs);\nCustomFunctions.associate(\"FETCHSUPPORTEDINPUTSBYANALYTICS\", fetchSupportedInputsByAnalytics);"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","gistRawURL","_fetchMarketDataResults","_callee","response","marketData","dataMatrix","_loop","symbol","_context2","fetch","json","item","rowData","_context","results","inputs","map","input","t0","t1","Excel","run","workbook","getSelectedRange","getResizedRange","sync","console","t3","_fetchMarketDataInputs","_callee2","inputsMatrix","_context3","_fetchSupportedInputsByAnalytics","_callee3","jsonData","_context4","ok","concat","status","range","securityld","priceDate","baseCurrency","idType2","liqCap","liqFloor","risk","riskHorizon","riskLookbackPeriod","riskReturnHorizon","useBestPracticeRealm","scenarioStartDate","scenarioEndDate","columnOrder","join","sortByColumns","titlesRange","getOffsetRange","resizedRange","titles","CustomFunctions","associate"],"sourceRoot":""}